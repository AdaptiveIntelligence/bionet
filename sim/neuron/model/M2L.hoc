
//  ******************************************************
//
//     File generated by: neuroConstruct v1.7.0
//
//     Generally replicates hoc for Cell Type as exported from
//     NEURON's Cell Builder, together with some neuroConstruct
//     specific helper/info procedures, e.g. toString(), netInfo()
//
//  ******************************************************


begintemplate M2L

public init, topol, basic_shape, subsets, geom, memb
public synlist, x, y, z, position, connect2target


//  Some fields for referencing the cells

public reference, type, description, name
strdef reference, type, description, name


//  Some methods for referencing the cells

public toString, netInfo

public all

objref synlist
objref all
objref stringFuncs

public soma_group
objref soma_group
public axon_group
objref axon_group

proc init() {
    topol()
    subsets()
    geom()
    biophys()
    geom_nseg()
    synlist = new List()
    x = y = z = 0
    reference = $s1
    type = $s2
    description = $s3
    
    strdef indexNum
    stringFuncs = new StringFunctions()
    stringFuncs.tail(reference, "_", indexNum)
    while (stringFuncs.substr( indexNum, "_")>=0) {
        stringFuncs.tail(indexNum, "_", indexNum)
    }
    
    sprint(name, "%s", type)
}

create Soma
public Soma
create Axon
public Axon

proc topol() {
    connect Axon(0), Soma(1.0)
    basic_shape()
}

proc basic_shape() {

//  Looking at segment number 0: Seg0_soma_0, section: Soma, SPHERICAL, ID: 0, ROOT SEGMENT, rad: 2.7303846, (3.7, -254.34999, 38.65) -> (3.7, -254.34999, 38.65)
    Soma {pt3dclear() pt3dadd(3.7, -257.08038, 38.65, 5.460769) pt3dadd(3.7, -251.61961, 38.65, 5.460769)}

//  Looking at segment number 1: Seg0_axon_0, section: Axon, ID: 1, parent: Seg0_soma_0 (0), rad: 0.40311286, (3.7, -254.34999, 38.65) -> (3.7, -254.4, 38.65), len: 0.0500031
    Axon {pt3dclear() pt3dadd(3.7, -254.34999, 38.65, 0.8062257) pt3dadd(3.7, -254.4, 38.65, 0.8062257)}

//  Looking at segment number 2: Seg2_axon_0, section: Axon, ID: 2, parent: Seg0_axon_0 (1), rad: 0.39370042, (3.7, -254.4, 38.65) -> (3.3500001, -255.45001, 39.1), len: 1.1948
    Axon {pt3dadd(3.3500001, -255.45001, 39.1, 0.78740084)}

//  Looking at segment number 3: Seg3_axon_0, section: Axon, ID: 3, parent: Seg2_axon_0 (2), rad: 0.4358899, (3.3500001, -255.45001, 39.1) -> (1.4000001, -259.3, 40.2), len: 4.45363
    Axon {pt3dadd(1.4000001, -259.3, 40.2, 0.8717798)}

//  Looking at segment number 4: Seg4_axon_0, section: Axon, ID: 4, parent: Seg3_axon_0 (3), rad: 0.40311286, (1.4000001, -259.3, 40.2) -> (1.2, -282.4, 47.65), len: 24.2725
    Axon {pt3dadd(1.2, -282.4, 47.65, 0.8062257)}

//  Looking at segment number 5: Seg5_axon_0, section: Axon, ID: 5, parent: Seg4_axon_0 (4), rad: 0.39370042, (1.2, -282.4, 47.65) -> (3.15, -285.85, 49.5), len: 4.37351
    Axon {pt3dadd(3.15, -285.85, 49.5, 0.78740084)}

//  Looking at segment number 6: Seg6_axon_0, section: Axon, ID: 6, parent: Seg5_axon_0 (5), rad: 0.39370042, (3.15, -285.85, 49.5) -> (5.9500003, -294.55, 52.0), len: 9.47521
    Axon {pt3dadd(5.9500003, -294.55, 52.0, 0.78740084)}

//  Looking at segment number 7: Seg7_axon_0, section: Axon, ID: 7, parent: Seg6_axon_0 (6), rad: 0.36742347, (5.9500003, -294.55, 52.0) -> (5.9500003, -295.15, 52.499996), len: 0.781027
    Axon {pt3dadd(5.9500003, -295.15, 52.499996, 0.73484695)}

//  Looking at segment number 8: Seg8_axon_0, section: Axon, ID: 8, parent: Seg7_axon_0 (7), rad: 0.39370042, (5.9500003, -295.15, 52.499996) -> (5.9500003, -295.19998, 53.55), len: 1.05119
    Axon {pt3dadd(5.9500003, -295.19998, 53.55, 0.78740084)}

//  Looking at segment number 9: Seg9_axon_0, section: Axon, ID: 9, parent: Seg8_axon_0 (8), rad: 0.41231057, (5.9500003, -295.19998, 53.55) -> (5.5, -295.1, 55.199997), len: 1.71318
    Axon {pt3dadd(5.5, -295.1, 55.199997, 0.82462114)}

//  Looking at segment number 10: Seg10_axon_0, section: Axon, ID: 10, parent: Seg9_axon_0 (9), rad: 0.39051247, (5.5, -295.1, 55.199997) -> (3.9500003, -295.0, 57.1), len: 2.45408
    Axon {pt3dadd(3.9500003, -295.0, 57.1, 0.78102493)}

//  Looking at segment number 11: Seg11_axon_0, section: Axon, ID: 11, parent: Seg10_axon_0 (10), rad: 0.40311286, (3.9500003, -295.0, 57.1) -> (1.8, -294.9, 58.350002), len: 2.48898
    Axon {pt3dadd(1.8, -294.9, 58.350002, 0.8062257)}

//  Looking at segment number 12: Seg12_axon_0, section: Axon, ID: 12, parent: Seg11_axon_0 (11), rad: 0.39051247, (1.8, -294.9, 58.350002) -> (0.4, -294.9, 58.850002), len: 1.48661
    Axon {pt3dadd(0.4, -294.9, 58.850002, 0.78102493)}

//  Looking at segment number 13: Seg13_axon_0, section: Axon, ID: 13, parent: Seg12_axon_0 (12), rad: 0.40620193, (0.4, -294.9, 58.850002) -> (-0.45, -295.1, 59.249996), len: 0.960469
    Axon {pt3dadd(-0.45, -295.1, 59.249996, 0.81240386)}

//  Looking at segment number 14: Seg14_axon_0, section: Axon, ID: 14, parent: Seg13_axon_0 (13), rad: 0.39051247, (-0.45, -295.1, 59.249996) -> (-0.70000005, -296.30002, 59.750004), len: 1.32383
    Axon {pt3dadd(-0.70000005, -296.30002, 59.750004, 0.78102493)}

//  Looking at segment number 15: Seg15_axon_0, section: Axon, ID: 15, parent: Seg14_axon_0 (14), rad: 0.39370042, (-0.70000005, -296.30002, 59.750004) -> (-0.8, -298.25, 59.850002), len: 1.9551
    Axon {pt3dadd(-0.8, -298.25, 59.850002, 0.78740084)}
}

proc subsets() { local i


//  The group all is assumed never to change
    all = new SectionList()


    soma_group = new SectionList()

    Soma soma_group.append()


    axon_group = new SectionList()

    Axon axon_group.append()


    Soma all.append()
    Axon all.append()
}

proc geom() {
}

proc biophys() {
    forsec all cm = 1.0
    forsec all Ra = 30.0

    forsec all { 
//      Assuming parameters other than max cond dens are set in the mod file...

        insert LeakConductance  { gmax_LeakConductance = 2.5E-5 }  
//      Ion non_specific is used in this mechanism...


    }

}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1

}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}

proc connect2target() {   //$o1 target point process, $o2 returned NetCon


//  Using standard NetBuilder form. (Overly) simple assumption that first soma seg is trigger for AP...
//  Note: neuroConstruct does not use this func for creating connections (in serial mode!), but it can be useful when using generated files in NEURON's NetBuilder

    Soma $o2 = new NetCon(&v(1), $o1)
    print "connect2target called on ", name
}


//  This function is useful when checking what cells (aot sections) have been created. Run allcells() from nCtools.hoc...

proc toString() {
    strdef info
    sprint(info, "Cell ref: %s (%s), at: (%d, %d, %d)", reference, name, x, y, z)
    print info
}


//  This function is useful when checking network connections

proc netInfo() {
    strdef info
    sprint(info, "Cell reference: %s, type: %s", reference, type)
    print "--------  ",info
    print "    There are ", synlist.count(), " connections in ", synlist
    for i=0,synlist.count()-1 {
        print "        Connection from ", synlist.o[i].precell, " to: ", synlist.o[i].postcell
        print "        Pre:   Weight: ", synlist.o[i].weight, ", delay: ", synlist.o[i].delay, ", threshold: ", synlist.o[i].threshold 
        print "        Post:  ", synlist.o[i].syn(), ", gmax: ", synlist.o[i].syn().gmax , ", e: ", synlist.o[i].syn().e , ", rise time: ", synlist.o[i].syn().tau_rise , ", decay time: ", synlist.o[i].syn().tau_decay 
    print " "
    }
    
    
    
    print "--------  "
    print " "
}


endtemplate M2L

