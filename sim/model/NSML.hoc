
//  ******************************************************
//
//     File generated by: neuroConstruct v1.7.0
//
//     Generally replicates hoc for Cell Type as exported from
//     NEURON's Cell Builder, together with some neuroConstruct
//     specific helper/info procedures, e.g. toString(), netInfo()
//
//  ******************************************************


begintemplate NSML

public init, topol, basic_shape, subsets, geom, memb
public synlist, x, y, z, position, connect2target


//  Some fields for referencing the cells

public reference, type, description, name
strdef reference, type, description, name


//  Some methods for referencing the cells

public toString, netInfo

public all

objref synlist
objref all
objref stringFuncs

public soma_group
objref soma_group
public axon_group
objref axon_group
public dendrite_group
objref dendrite_group

proc init() {
    topol()
    subsets()
    geom()
    biophys()
    geom_nseg()
    synlist = new List()
    x = y = z = 0
    reference = $s1
    type = $s2
    description = $s3
    
    strdef indexNum
    stringFuncs = new StringFunctions()
    stringFuncs.tail(reference, "_", indexNum)
    while (stringFuncs.substr( indexNum, "_")>=0) {
        stringFuncs.tail(indexNum, "_", indexNum)
    }
    
    sprint(name, "%s", type)
}

create Soma
public Soma
create Axon
public Axon
create Neurite2
public Neurite2
create Neurite3
public Neurite3

proc topol() {
    connect Axon(0), Soma(1.0)
    connect Neurite2(0), Axon(1.0)
    connect Neurite3(0), Axon(1.0)
    basic_shape()
}

proc basic_shape() {

//  Looking at segment number 0: Seg0_soma_0, section: Soma, SPHERICAL, ID: 0, ROOT SEGMENT, rad: 1.7153717, (2.6000001, -292.25, 51.8) -> (2.6000001, -292.25, 51.8)
    Soma {pt3dclear() pt3dadd(2.6000001, -293.96536, 51.8, 3.4307435) pt3dadd(2.6000001, -290.53464, 51.8, 3.4307435)}

//  Looking at segment number 1: Seg0_axon_0, section: Axon, ID: 1, parent: Seg0_soma_0 (0), rad: 0.25495097, (2.6000001, -292.25, 51.8) -> (2.6000001, -292.25, 51.85), len: 0.0499992
    Axon {pt3dclear() pt3dadd(2.6000001, -292.25, 51.8, 0.50990194) pt3dadd(2.6000001, -292.25, 51.85, 0.50990194)}

//  Looking at segment number 2: Seg2_axon_0, section: Axon, ID: 2, parent: Seg0_axon_0 (1), rad: 0.25495097, (2.6000001, -292.25, 51.85) -> (2.6000001, -288.05002, 50.65), len: 4.36805
    Axon {pt3dadd(2.6000001, -288.05002, 50.65, 0.50990194)}

//  Looking at segment number 3: Seg3_neurite_0, section: Neurite2, ID: 3, parent: Seg2_axon_0 (2), rad: 0.28722814, (2.6000001, -288.05002, 50.65) -> (2.6000001, -287.9, 50.449997), len: 0.250018
    Neurite2 {pt3dclear() pt3dadd(2.6000001, -288.05002, 50.65, 0.50990194) pt3dadd(2.6000001, -287.9, 50.449997, 0.5744563)}

//  Looking at segment number 4: Seg4_neurite_0, section: Neurite2, ID: 4, parent: Seg3_neurite_0 (3), rad: 0.26100767, (2.6000001, -287.9, 50.449997) -> (2.55, -287.9, 50.125004), len: 0.328817
    Neurite2 {pt3dadd(2.55, -287.9, 50.125004, 0.52201533)}

//  Looking at segment number 5: Seg5_neurite_0, section: Neurite2, ID: 5, parent: Seg4_neurite_0 (4), rad: 0.24874686, (2.55, -287.9, 50.125004) -> (2.125, -288.025, 49.175), len: 1.04822
    Neurite2 {pt3dadd(2.125, -288.025, 49.175, 0.4974937)}

//  Looking at segment number 6: Seg6_neurite_0, section: Neurite2, ID: 6, parent: Seg5_neurite_0 (5), rad: 0.23717082, (2.125, -288.025, 49.175) -> (1.3000001, -288.07498, 47.875), len: 1.54049
    Neurite2 {pt3dadd(1.3000001, -288.07498, 47.875, 0.47434163)}

//  Looking at segment number 7: Seg7_neurite_0, section: Neurite2, ID: 7, parent: Seg6_neurite_0 (6), rad: 0.275, (1.3000001, -288.07498, 47.875) -> (-0.15, -288.125, 46.95), len: 1.72065
    Neurite2 {pt3dadd(-0.15, -288.125, 46.95, 0.55)}

//  Looking at segment number 8: Seg8_neurite_0, section: Neurite2, ID: 8, parent: Seg7_neurite_0 (7), rad: 0.21213202, (-0.15, -288.125, 46.95) -> (-1.9, -288.15, 46.55), len: 1.79531
    Neurite2 {pt3dadd(-1.9, -288.15, 46.55, 0.42426404)}

//  Looking at segment number 9: Seg9_neurite_0, section: Neurite2, ID: 9, parent: Seg8_neurite_0 (8), rad: 0.20916502, (-1.9, -288.15, 46.55) -> (-3.5750003, -288.15, 46.875), len: 1.70624
    Neurite2 {pt3dadd(-3.5750003, -288.15, 46.875, 0.41833004)}

//  Looking at segment number 10: Seg10_neurite_0, section: Neurite2, ID: 10, parent: Seg9_neurite_0 (9), rad: 0.18874586, (-3.5750003, -288.15, 46.875) -> (-5.0, -288.07498, 47.9), len: 1.75695
    Neurite2 {pt3dadd(-5.0, -288.07498, 47.9, 0.3774917)}

//  Looking at segment number 11: Seg11_neurite_0, section: Neurite2, ID: 11, parent: Seg10_neurite_0 (10), rad: 0.27041635, (-5.0, -288.07498, 47.9) -> (-5.975, -288.0, 49.25), len: 1.66696
    Neurite2 {pt3dadd(-5.975, -288.0, 49.25, 0.5408327)}

//  Looking at segment number 12: Seg12_neurite_0, section: Neurite2, ID: 12, parent: Seg11_neurite_0 (11), rad: 0.19525623, (-5.975, -288.0, 49.25) -> (-6.3500004, -287.875, 51.0), len: 1.79409
    Neurite2 {pt3dadd(-6.3500004, -287.875, 51.0, 0.39051247)}

//  Looking at segment number 13: Seg13_neurite_0, section: Neurite2, ID: 13, parent: Seg12_neurite_0 (12), rad: 0.20916502, (-6.3500004, -287.875, 51.0) -> (-6.025, -287.75, 52.675003), len: 1.71081
    Neurite2 {pt3dadd(-6.025, -287.75, 52.675003, 0.41833004)}

//  Looking at segment number 14: Seg14_neurite_0, section: Neurite2, ID: 14, parent: Seg13_neurite_0 (13), rad: 0.20615529, (-6.025, -287.75, 52.675003) -> (-5.6000004, -287.75, 53.500004), len: 0.928036
    Neurite2 {pt3dadd(-5.6000004, -287.75, 53.500004, 0.41231057)}

//  Looking at segment number 15: Seg15_neurite_0, section: Neurite2, ID: 15, parent: Seg14_neurite_0 (14), rad: 0.23452078, (-5.6000004, -287.75, 53.500004) -> (-5.25, -287.4, 53.649998), len: 0.517207
    Neurite2 {pt3dadd(-5.25, -287.4, 53.649998, 0.46904156)}

//  Looking at segment number 16: Seg16_neurite_0, section: Neurite2, ID: 16, parent: Seg15_neurite_0 (15), rad: 0.25, (-5.25, -287.4, 53.649998) -> (-4.8, -286.5, 53.350002), len: 1.04999
    Neurite2 {pt3dadd(-4.8, -286.5, 53.350002, 0.5)}

//  Looking at segment number 17: Seg17_neurite_0, section: Neurite2, ID: 17, parent: Seg16_neurite_0 (16), rad: 0.28284273, (-4.8, -286.5, 53.350002) -> (-4.8, -282.3, 50.6), len: 5.02022
    Neurite2 {pt3dadd(-4.8, -282.3, 50.6, 0.56568545)}

//  Looking at segment number 18: Seg18_neurite_0, section: Neurite2, ID: 18, parent: Seg17_neurite_0 (17), rad: 0.25, (-4.8, -282.3, 50.6) -> (-4.8, -272.5, 47.350002), len: 10.3248
    Neurite2 {pt3dadd(-4.8, -272.5, 47.350002, 0.5)}

//  Looking at segment number 19: Seg19_neurite_0, section: Neurite2, ID: 19, parent: Seg18_neurite_0 (18), rad: 0.28284273, (-4.8, -272.5, 47.350002) -> (-4.8, -264.5, 44.600002), len: 8.45946
    Neurite2 {pt3dadd(-4.8, -264.5, 44.600002, 0.56568545)}

//  Looking at segment number 20: Seg20_neurite_0, section: Neurite2, ID: 20, parent: Seg19_neurite_0 (19), rad: 0.25, (-4.8, -264.5, 44.600002) -> (-4.8, -263.7, 44.350002), len: 0.838141
    Neurite2 {pt3dadd(-4.8, -263.7, 44.350002, 0.5)}

//  Looking at segment number 21: Seg21_neurite_0, section: Neurite3, ID: 21, parent: Seg2_axon_0 (2), rad: 0.25, (2.6000001, -288.05002, 50.65) -> (2.6000001, -287.7, 50.550003), len: 0.364011
    Neurite3 {pt3dclear() pt3dadd(2.6000001, -288.05002, 50.65, 0.50990194) pt3dadd(2.6000001, -287.7, 50.550003, 0.5)}

//  Looking at segment number 22: Seg22_neurite_0, section: Neurite3, ID: 22, parent: Seg21_neurite_0 (21), rad: 0.25495097, (2.6000001, -287.7, 50.550003) -> (2.6000001, -279.55002, 47.45), len: 8.71966
    Neurite3 {pt3dadd(2.6000001, -279.55002, 47.45, 0.50990194)}

//  Looking at segment number 23: Seg23_neurite_0, section: Neurite3, ID: 23, parent: Seg22_neurite_0 (22), rad: 0.25, (2.6000001, -279.55002, 47.45) -> (2.6000001, -261.8, 41.25), len: 18.8017
    Neurite3 {pt3dadd(2.6000001, -261.8, 41.25, 0.5)}

//  Looking at segment number 24: Seg24_neurite_0, section: Neurite3, ID: 24, parent: Seg23_neurite_0 (23), rad: 0.25, (2.6000001, -261.8, 41.25) -> (2.6000001, -259.5, 40.65), len: 2.37696
    Neurite3 {pt3dadd(2.6000001, -259.5, 40.65, 0.5)}
}

proc subsets() { local i


//  The group all is assumed never to change
    all = new SectionList()


    soma_group = new SectionList()

    Soma soma_group.append()


    axon_group = new SectionList()

    Axon axon_group.append()


    dendrite_group = new SectionList()

    Neurite2 dendrite_group.append()
    Neurite3 dendrite_group.append()


    Soma all.append()
    Axon all.append()
    Neurite2 all.append()
    Neurite3 all.append()
}

proc geom() {
}

proc biophys() {
    forsec all cm = 1.0
    forsec all Ra = 30.0

    forsec all { 
//      Assuming parameters other than max cond dens are set in the mod file...

        insert LeakConductance  { gmax_LeakConductance = 2.5E-5 }  
//      Ion non_specific is used in this mechanism...


    }

}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1

}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}

proc connect2target() {   //$o1 target point process, $o2 returned NetCon


//  Using standard NetBuilder form. (Overly) simple assumption that first soma seg is trigger for AP...
//  Note: neuroConstruct does not use this func for creating connections (in serial mode!), but it can be useful when using generated files in NEURON's NetBuilder

    Soma $o2 = new NetCon(&v(1), $o1)
    print "connect2target called on ", name
}


//  This function is useful when checking what cells (aot sections) have been created. Run allcells() from nCtools.hoc...

proc toString() {
    strdef info
    sprint(info, "Cell ref: %s (%s), at: (%d, %d, %d)", reference, name, x, y, z)
    print info
}


//  This function is useful when checking network connections

proc netInfo() {
    strdef info
    sprint(info, "Cell reference: %s, type: %s", reference, type)
    print "--------  ",info
    print "    There are ", synlist.count(), " connections in ", synlist
    for i=0,synlist.count()-1 {
        print "        Connection from ", synlist.o[i].precell, " to: ", synlist.o[i].postcell
        print "        Pre:   Weight: ", synlist.o[i].weight, ", delay: ", synlist.o[i].delay, ", threshold: ", synlist.o[i].threshold 
        print "        Post:  ", synlist.o[i].syn(), ", gmax: ", synlist.o[i].syn().gmax , ", e: ", synlist.o[i].syn().e , ", rise time: ", synlist.o[i].syn().tau_rise , ", decay time: ", synlist.o[i].syn().tau_decay 
    print " "
    }
    
    
    
    print "--------  "
    print " "
}


endtemplate NSML

