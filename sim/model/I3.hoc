
//  ******************************************************
//
//     File generated by: neuroConstruct v1.7.0
//
//     Generally replicates hoc for Cell Type as exported from
//     NEURON's Cell Builder, together with some neuroConstruct
//     specific helper/info procedures, e.g. toString(), netInfo()
//
//  ******************************************************


begintemplate I3

public init, topol, basic_shape, subsets, geom, memb
public synlist, x, y, z, position, connect2target


//  Some fields for referencing the cells

public reference, type, description, name
strdef reference, type, description, name


//  Some methods for referencing the cells

public toString, netInfo

public all

objref synlist
objref all
objref stringFuncs

public soma_group
objref soma_group
public axon_group
objref axon_group
public dendrite_group
objref dendrite_group

proc init() {
    topol()
    subsets()
    geom()
    biophys()
    geom_nseg()
    synlist = new List()
    x = y = z = 0
    reference = $s1
    type = $s2
    description = $s3
    
    strdef indexNum
    stringFuncs = new StringFunctions()
    stringFuncs.tail(reference, "_", indexNum)
    while (stringFuncs.substr( indexNum, "_")>=0) {
        stringFuncs.tail(indexNum, "_", indexNum)
    }
    
    sprint(name, "%s", type)
}

create Soma
public Soma
create Axon
public Axon
create Dendrite2
public Dendrite2
create Neurite3
public Neurite3
create Neurite4
public Neurite4

proc topol() {
    connect Axon(0), Soma(1.0)
    connect Dendrite2(0), Soma(1.0)
    connect Neurite3(0), Axon(1.0)
    connect Neurite4(0), Axon(1.0)
    basic_shape()
}

proc basic_shape() {

//  Looking at segment number 0: Seg0_soma_0, section: Soma, SPHERICAL, ID: 0, ROOT SEGMENT, rad: 1.770593, (-2.05, -296.55002, 58.25) -> (-2.05, -296.55002, 58.25)
    Soma {pt3dclear() pt3dadd(-2.05, -298.32062, 58.25, 3.541186) pt3dadd(-2.05, -294.77942, 58.25, 3.541186)}

//  Looking at segment number 1: Seg0_axon_0, section: Axon, ID: 8, parent: Seg0_soma_0 (0), rad: 0.21794495, (-2.05, -296.55002, 58.25) -> (-2.05, -295.25, 58.149998), len: 1.30386
    Axon {pt3dclear() pt3dadd(-2.05, -296.55002, 58.25, 0.4358899) pt3dadd(-2.05, -295.25, 58.149998, 0.4358899)}

//  Looking at segment number 2: Seg9_axon_0, section: Axon, ID: 9, parent: Seg0_axon_0 (8), rad: 0.21794495, (-2.05, -295.25, 58.149998) -> (-2.05, -292.65, 57.85), len: 2.61726
    Axon {pt3dadd(-2.05, -292.65, 57.85, 0.4358899)}

//  Looking at segment number 3: Seg10_axon_0, section: Axon, ID: 10, parent: Seg9_axon_0 (9), rad: 0.21213202, (-2.05, -292.65, 57.85) -> (-2.05, -290.19998, 57.65), len: 2.45816
    Axon {pt3dadd(-2.05, -290.19998, 57.65, 0.42426404)}

//  Looking at segment number 4: Seg0_dendrit_2, section: Dendrite2, ID: 1, parent: Seg0_soma_0 (0), rad: 0.21794495, (-2.05, -296.55002, 58.25) -> (-2.05, -297.84998, 58.350002), len: 1.3038
    Dendrite2 {pt3dclear() pt3dadd(-2.05, -296.55002, 58.25, 0.4358899) pt3dadd(-2.05, -297.84998, 58.350002, 0.4358899)}

//  Looking at segment number 5: Seg2_dendrite_0, section: Dendrite2, ID: 2, parent: Seg0_dendrit_2 (1), rad: 0.21213202, (-2.05, -297.84998, 58.350002) -> (-2.05, -300.1, 58.350002), len: 2.25003
    Dendrite2 {pt3dadd(-2.05, -300.1, 58.350002, 0.42426404)}

//  Looking at segment number 6: Seg3_dendrite_0, section: Dendrite2, ID: 3, parent: Seg2_dendrite_0 (2), rad: 0.21213202, (-2.05, -300.1, 58.350002) -> (-2.05, -304.5, 58.45), len: 4.40113
    Dendrite2 {pt3dadd(-2.05, -304.5, 58.45, 0.42426404)}

//  Looking at segment number 7: Seg4_dendrite_0, section: Dendrite2, ID: 4, parent: Seg3_dendrite_0 (3), rad: 0.21213202, (-2.05, -304.5, 58.45) -> (-2.05, -337.0, 60.45), len: 32.5615
    Dendrite2 {pt3dadd(-2.05, -337.0, 60.45, 0.42426404)}

//  Looking at segment number 8: Seg5_dendrite_0, section: Dendrite2, ID: 5, parent: Seg4_dendrite_0 (4), rad: 0.21213202, (-2.05, -337.0, 60.45) -> (-2.05, -337.4, 60.350002), len: 0.412304
    Dendrite2 {pt3dadd(-2.05, -337.4, 60.350002, 0.42426404)}

//  Looking at segment number 9: Seg6_dendrite_0, section: Dendrite2, ID: 6, parent: Seg5_dendrite_0 (5), rad: 0.23452078, (-2.05, -337.4, 60.350002) -> (-2.05, -341.5, 59.95), len: 4.11947
    Dendrite2 {pt3dadd(-2.05, -341.5, 59.95, 0.46904156)}

//  Looking at segment number 10: Seg7_dendrite_0, section: Dendrite2, ID: 7, parent: Seg6_dendrite_0 (6), rad: 0.20615529, (-2.05, -341.5, 59.95) -> (-2.05, -342.0, 59.600002), len: 0.610327
    Dendrite2 {pt3dadd(-2.05, -342.0, 59.600002, 0.41231057)}

//  Looking at segment number 11: Seg11_neurite_0, section: Neurite3, ID: 11, parent: Seg10_axon_0 (10), rad: 0.21213202, (-2.05, -290.19998, 57.65) -> (-2.05, -290.05002, 57.8), len: 0.212105
    Neurite3 {pt3dclear() pt3dadd(-2.05, -290.19998, 57.65, 0.42426404) pt3dadd(-2.05, -290.05002, 57.8, 0.42426404)}

//  Looking at segment number 12: Seg12_neurite_0, section: Neurite3, ID: 12, parent: Seg11_neurite_0 (11), rad: 0.21213202, (-2.05, -290.05002, 57.8) -> (-2.05, -290.05002, 58.2), len: 0.400002
    Neurite3 {pt3dadd(-2.05, -290.05002, 58.2, 0.42426404)}

//  Looking at segment number 13: Seg13_neurite_0, section: Neurite4, ID: 13, parent: Seg10_axon_0 (10), rad: 0.18027757, (-2.05, -290.19998, 57.65) -> (-2.05, -290.1, 57.5), len: 0.180265
    Neurite4 {pt3dclear() pt3dadd(-2.05, -290.19998, 57.65, 0.42426404) pt3dadd(-2.05, -290.1, 57.5, 0.36055514)}

//  Looking at segment number 14: Seg14_neurite_0, section: Neurite4, ID: 14, parent: Seg13_neurite_0 (13), rad: 0.21794495, (-2.05, -290.1, 57.5) -> (-2.05, -290.15, 56.950005), len: 0.552262
    Neurite4 {pt3dadd(-2.05, -290.15, 56.950005, 0.4358899)}
}

proc subsets() { local i


//  The group all is assumed never to change
    all = new SectionList()


    soma_group = new SectionList()

    Soma soma_group.append()


    axon_group = new SectionList()

    Axon axon_group.append()


    dendrite_group = new SectionList()

    Dendrite2 dendrite_group.append()
    Neurite3 dendrite_group.append()
    Neurite4 dendrite_group.append()


    Soma all.append()
    Axon all.append()
    Dendrite2 all.append()
    Neurite3 all.append()
    Neurite4 all.append()
}

proc geom() {
}

proc biophys() {
    forsec all cm = 1.0
    forsec all Ra = 30.0

    forsec all { 
//      Assuming parameters other than max cond dens are set in the mod file...

        insert LeakConductance  { gmax_LeakConductance = 2.5E-5 }  
//      Ion non_specific is used in this mechanism...


    }

}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1

}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}

proc connect2target() {   //$o1 target point process, $o2 returned NetCon


//  Using standard NetBuilder form. (Overly) simple assumption that first soma seg is trigger for AP...
//  Note: neuroConstruct does not use this func for creating connections (in serial mode!), but it can be useful when using generated files in NEURON's NetBuilder

    Soma $o2 = new NetCon(&v(1), $o1)
    print "connect2target called on ", name
}


//  This function is useful when checking what cells (aot sections) have been created. Run allcells() from nCtools.hoc...

proc toString() {
    strdef info
    sprint(info, "Cell ref: %s (%s), at: (%d, %d, %d)", reference, name, x, y, z)
    print info
}


//  This function is useful when checking network connections

proc netInfo() {
    strdef info
    sprint(info, "Cell reference: %s, type: %s", reference, type)
    print "--------  ",info
    print "    There are ", synlist.count(), " connections in ", synlist
    for i=0,synlist.count()-1 {
        print "        Connection from ", synlist.o[i].precell, " to: ", synlist.o[i].postcell
        print "        Pre:   Weight: ", synlist.o[i].weight, ", delay: ", synlist.o[i].delay, ", threshold: ", synlist.o[i].threshold 
        print "        Post:  ", synlist.o[i].syn(), ", gmax: ", synlist.o[i].syn().gmax , ", e: ", synlist.o[i].syn().e , ", rise time: ", synlist.o[i].syn().tau_rise , ", decay time: ", synlist.o[i].syn().tau_decay 
    print " "
    }
    
    
    
    print "--------  "
    print " "
}


endtemplate I3

