
//  ******************************************************
//
//     File generated by: neuroConstruct v1.7.0
//
//     Generally replicates hoc for Cell Type as exported from
//     NEURON's Cell Builder, together with some neuroConstruct
//     specific helper/info procedures, e.g. toString(), netInfo()
//
//  ******************************************************


begintemplate I6

public init, topol, basic_shape, subsets, geom, memb
public synlist, x, y, z, position, connect2target


//  Some fields for referencing the cells

public reference, type, description, name
strdef reference, type, description, name


//  Some methods for referencing the cells

public toString, netInfo

public all

objref synlist
objref all
objref stringFuncs

public soma_group
objref soma_group
public axon_group
objref axon_group
public dendrite_group
objref dendrite_group

proc init() {
    topol()
    subsets()
    geom()
    biophys()
    geom_nseg()
    synlist = new List()
    x = y = z = 0
    reference = $s1
    type = $s2
    description = $s3
    
    strdef indexNum
    stringFuncs = new StringFunctions()
    stringFuncs.tail(reference, "_", indexNum)
    while (stringFuncs.substr( indexNum, "_")>=0) {
        stringFuncs.tail(indexNum, "_", indexNum)
    }
    
    sprint(name, "%s", type)
}

create Soma
public Soma
create Axon
public Axon
create Dendrite2
public Dendrite2
create Neurite3
public Neurite3
create Neurite4
public Neurite4

proc topol() {
    connect Axon(0), Soma(1.0)
    connect Dendrite2(0), Soma(1.0)
    connect Neurite3(0), Dendrite2(1.0)
    connect Neurite4(0), Dendrite2(1.0)
    basic_shape()
}

proc basic_shape() {

//  Looking at segment number 0: Seg0_soma_0, section: Soma, SPHERICAL, ID: 0, ROOT SEGMENT, rad: 2.267708, (1.7, -251.65, 43.05) -> (1.7, -251.65, 43.05)
    Soma {pt3dclear() pt3dadd(1.7, -253.91771, 43.05, 4.535416) pt3dadd(1.7, -249.38228, 43.05, 4.535416)}

//  Looking at segment number 1: Seg0_axon_0, section: Axon, ID: 10, parent: Seg0_soma_0 (0), rad: 0.42720017, (1.7, -251.65, 43.05) -> (1.7, -250.05, 42.899998), len: 1.60701
    Axon {pt3dclear() pt3dadd(1.7, -251.65, 43.05, 0.85440034) pt3dadd(1.7, -250.05, 42.899998, 0.85440034)}

//  Looking at segment number 2: Seg11_axon_0, section: Axon, ID: 11, parent: Seg0_axon_0 (10), rad: 0.28284273, (1.7, -250.05, 42.899998) -> (1.7, -247.19998, 42.399998), len: 2.89355
    Axon {pt3dadd(1.7, -247.19998, 42.399998, 0.56568545)}

//  Looking at segment number 3: Seg12_axon_0, section: Axon, ID: 12, parent: Seg11_axon_0 (11), rad: 0.3, (1.7, -247.19998, 42.399998) -> (1.7, -244.0, 42.1), len: 3.21401
    Axon {pt3dadd(1.7, -244.0, 42.1, 0.6)}

//  Looking at segment number 4: Seg13_axon_0, section: Axon, ID: 13, parent: Seg12_axon_0 (12), rad: 0.3211308, (1.7, -244.0, 42.1) -> (1.6, -243.75, 42.225), len: 0.296859
    Axon {pt3dadd(1.6, -243.75, 42.225, 0.6422616)}

//  Looking at segment number 5: Seg14_axon_0, section: Axon, ID: 14, parent: Seg13_axon_0 (13), rad: 0.3142451, (1.6, -243.75, 42.225) -> (0.275, -243.54999, 43.375), len: 1.76582
    Axon {pt3dadd(0.275, -243.54999, 43.375, 0.6284902)}

//  Looking at segment number 6: Seg15_axon_0, section: Axon, ID: 15, parent: Seg14_axon_0 (14), rad: 0.32403705, (0.275, -243.54999, 43.375) -> (-1.25, -243.65001, 44.0), len: 1.65114
    Axon {pt3dadd(-1.25, -243.65001, 44.0, 0.6480741)}

//  Looking at segment number 7: Seg16_axon_0, section: Axon, ID: 16, parent: Seg15_axon_0 (15), rad: 0.3436932, (-1.25, -243.65001, 44.0) -> (-3.225, -243.54999, 44.0), len: 1.97753
    Axon {pt3dadd(-3.225, -243.54999, 44.0, 0.6873864)}

//  Looking at segment number 8: Seg17_axon_0, section: Axon, ID: 17, parent: Seg16_axon_0 (16), rad: 0.30822068, (-3.225, -243.54999, 44.0) -> (-5.0, -243.65001, 43.149998), len: 1.97057
    Axon {pt3dadd(-5.0, -243.65001, 43.149998, 0.61644137)}

//  Looking at segment number 9: Seg18_axon_0, section: Axon, ID: 18, parent: Seg17_axon_0 (17), rad: 0.34003678, (-5.0, -243.65001, 43.149998) -> (-5.9500003, -243.65001, 42.125), len: 1.39754
    Axon {pt3dadd(-5.9500003, -243.65001, 42.125, 0.68007356)}

//  Looking at segment number 10: Seg19_axon_0, section: Axon, ID: 19, parent: Seg18_axon_0 (18), rad: 0.30923292, (-5.9500003, -243.65001, 42.125) -> (-6.1, -243.9, 41.925003), len: 0.353541
    Axon {pt3dadd(-6.1, -243.9, 41.925003, 0.61846584)}

//  Looking at segment number 11: Seg20_axon_0, section: Axon, ID: 20, parent: Seg19_axon_0 (19), rad: 0.20615529, (-6.1, -243.9, 41.925003) -> (-6.1, -244.5, 41.95), len: 0.600527
    Axon {pt3dadd(-6.1, -244.5, 41.95, 0.41231057)}

//  Looking at segment number 12: Seg21_axon_0, section: Axon, ID: 21, parent: Seg20_axon_0 (20), rad: 0.25980762, (-6.1, -244.5, 41.95) -> (-6.05, -249.95, 42.75), len: 5.50863
    Axon {pt3dadd(-6.05, -249.95, 42.75, 0.51961523)}

//  Looking at segment number 13: Seg22_axon_0, section: Axon, ID: 22, parent: Seg21_axon_0 (21), rad: 0.2512469, (-6.05, -249.95, 42.75) -> (-5.15, -257.9, 43.825), len: 8.07267
    Axon {pt3dadd(-5.15, -257.9, 43.825, 0.5024938)}

//  Looking at segment number 14: Seg23_axon_0, section: Axon, ID: 23, parent: Seg22_axon_0 (22), rad: 0.18027757, (-5.15, -257.9, 43.825) -> (-5.1, -258.69998, 43.55), len: 0.847412
    Axon {pt3dadd(-5.1, -258.69998, 43.55, 0.36055514)}

//  Looking at segment number 15: Seg24_axon_0, section: Axon, ID: 24, parent: Seg23_axon_0 (23), rad: 0.14361407, (-5.1, -258.69998, 43.55) -> (-5.175, -259.69998, 42.399998), len: 1.52582
    Axon {pt3dadd(-5.175, -259.69998, 42.399998, 0.28722814)}

//  Looking at segment number 16: Seg25_axon_0, section: Axon, ID: 25, parent: Seg24_axon_0 (24), rad: 0.15811388, (-5.175, -259.69998, 42.399998) -> (-5.25, -260.6, 40.95), len: 1.70826
    Axon {pt3dadd(-5.25, -260.6, 40.95, 0.31622776)}

//  Looking at segment number 17: Seg0_dendrit_2, section: Dendrite2, ID: 1, parent: Seg0_soma_0 (0), rad: 0.42720017, (1.7, -251.65, 43.05) -> (1.7, -253.25, 43.2), len: 1.60702
    Dendrite2 {pt3dclear() pt3dadd(1.7, -251.65, 43.05, 0.85440034) pt3dadd(1.7, -253.25, 43.2, 0.85440034)}

//  Looking at segment number 18: Seg2_dendrite_0, section: Dendrite2, ID: 2, parent: Seg0_dendrit_2 (1), rad: 0.28284273, (1.7, -253.25, 43.2) -> (1.7, -256.3, 43.6), len: 3.07611
    Dendrite2 {pt3dadd(1.7, -256.3, 43.6, 0.56568545)}

//  Looking at segment number 19: Seg3_dendrite_0, section: Dendrite2, ID: 3, parent: Seg2_dendrite_0 (2), rad: 0.28722814, (1.7, -256.3, 43.6) -> (1.7, -258.94998, 43.399998), len: 2.65753
    Dendrite2 {pt3dadd(1.7, -258.94998, 43.399998, 0.5744563)}

//  Looking at segment number 20: Seg4_dendrite_0, section: Dendrite2, ID: 4, parent: Seg3_dendrite_0 (3), rad: 0.21794495, (1.7, -258.94998, 43.399998) -> (1.35, -282.25, 50.550003), len: 24.3749
    Dendrite2 {pt3dadd(1.35, -282.25, 50.550003, 0.4358899)}

//  Looking at segment number 21: Seg5_dendrite_0, section: Dendrite2, ID: 5, parent: Seg4_dendrite_0 (4), rad: 0.25495097, (1.35, -282.25, 50.550003) -> (1.35, -284.55, 51.6), len: 2.52833
    Dendrite2 {pt3dadd(1.35, -284.55, 51.6, 0.50990194)}

//  Looking at segment number 22: Seg6_neurite_0, section: Neurite3, ID: 6, parent: Seg5_dendrite_0 (5), rad: 0.21794495, (1.35, -284.55, 51.6) -> (1.35, -284.75, 51.45), len: 0.250008
    Neurite3 {pt3dclear() pt3dadd(1.35, -284.55, 51.6, 0.50990194) pt3dadd(1.35, -284.75, 51.45, 0.4358899)}

//  Looking at segment number 23: Seg7_neurite_0, section: Neurite3, ID: 7, parent: Seg6_neurite_0 (6), rad: 0.21794495, (1.35, -284.75, 51.45) -> (1.35, -285.05002, 50.35), len: 1.14018
    Neurite3 {pt3dadd(1.35, -285.05002, 50.35, 0.4358899)}

//  Looking at segment number 24: Seg8_neurite_0, section: Neurite4, ID: 8, parent: Seg5_dendrite_0 (5), rad: 0.21213202, (1.35, -284.55, 51.6) -> (1.35, -284.65, 51.8), len: 0.22361
    Neurite4 {pt3dclear() pt3dadd(1.35, -284.55, 51.6, 0.50990194) pt3dadd(1.35, -284.65, 51.8, 0.42426404)}

//  Looking at segment number 25: Seg9_neurite_0, section: Neurite4, ID: 9, parent: Seg8_neurite_0 (8), rad: 0.21794495, (1.35, -284.65, 51.8) -> (1.35, -284.55, 52.649998), len: 0.855861
    Neurite4 {pt3dadd(1.35, -284.55, 52.649998, 0.4358899)}
}

proc subsets() { local i


//  The group all is assumed never to change
    all = new SectionList()


    soma_group = new SectionList()

    Soma soma_group.append()


    axon_group = new SectionList()

    Axon axon_group.append()


    dendrite_group = new SectionList()

    Dendrite2 dendrite_group.append()
    Neurite3 dendrite_group.append()
    Neurite4 dendrite_group.append()


    Soma all.append()
    Axon all.append()
    Dendrite2 all.append()
    Neurite3 all.append()
    Neurite4 all.append()
}

proc geom() {
}

proc biophys() {
    forsec all cm = 1.0
    forsec all Ra = 30.0

    forsec all { 
//      Assuming parameters other than max cond dens are set in the mod file...

        insert LeakConductance  { gmax_LeakConductance = 2.5E-5 }  
//      Ion non_specific is used in this mechanism...


    }

}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1

}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}

proc connect2target() {   //$o1 target point process, $o2 returned NetCon


//  Using standard NetBuilder form. (Overly) simple assumption that first soma seg is trigger for AP...
//  Note: neuroConstruct does not use this func for creating connections (in serial mode!), but it can be useful when using generated files in NEURON's NetBuilder

    Soma $o2 = new NetCon(&v(1), $o1)
    print "connect2target called on ", name
}


//  This function is useful when checking what cells (aot sections) have been created. Run allcells() from nCtools.hoc...

proc toString() {
    strdef info
    sprint(info, "Cell ref: %s (%s), at: (%d, %d, %d)", reference, name, x, y, z)
    print info
}


//  This function is useful when checking network connections

proc netInfo() {
    strdef info
    sprint(info, "Cell reference: %s, type: %s", reference, type)
    print "--------  ",info
    print "    There are ", synlist.count(), " connections in ", synlist
    for i=0,synlist.count()-1 {
        print "        Connection from ", synlist.o[i].precell, " to: ", synlist.o[i].postcell
        print "        Pre:   Weight: ", synlist.o[i].weight, ", delay: ", synlist.o[i].delay, ", threshold: ", synlist.o[i].threshold 
        print "        Post:  ", synlist.o[i].syn(), ", gmax: ", synlist.o[i].syn().gmax , ", e: ", synlist.o[i].syn().e , ", rise time: ", synlist.o[i].syn().tau_rise , ", decay time: ", synlist.o[i].syn().tau_decay 
    print " "
    }
    
    
    
    print "--------  "
    print " "
}


endtemplate I6

