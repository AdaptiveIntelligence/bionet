
//  ******************************************************
//
//     File generated by: neuroConstruct v1.7.0
//
//     Generally replicates hoc for Cell Type as exported from
//     NEURON's Cell Builder, together with some neuroConstruct
//     specific helper/info procedures, e.g. toString(), netInfo()
//
//  ******************************************************


begintemplate MI

public init, topol, basic_shape, subsets, geom, memb
public synlist, x, y, z, position, connect2target


//  Some fields for referencing the cells

public reference, type, description, name
strdef reference, type, description, name


//  Some methods for referencing the cells

public toString, netInfo

public all

objref synlist
objref all
objref stringFuncs

public soma_group
objref soma_group
public axon_group
objref axon_group

proc init() {
    topol()
    subsets()
    geom()
    biophys()
    geom_nseg()
    synlist = new List()
    x = y = z = 0
    reference = $s1
    type = $s2
    description = $s3
    
    strdef indexNum
    stringFuncs = new StringFunctions()
    stringFuncs.tail(reference, "_", indexNum)
    while (stringFuncs.substr( indexNum, "_")>=0) {
        stringFuncs.tail(indexNum, "_", indexNum)
    }
    
    sprint(name, "%s", type)
}

create Soma
public Soma
create Axon
public Axon

proc topol() {
    connect Axon(0), Soma(1.0)
    basic_shape()
}

proc basic_shape() {

//  Looking at segment number 0: Seg0_soma_0, section: Soma, SPHERICAL, ID: 0, ROOT SEGMENT, rad: 2.1216855, (-2.1539998, -293.51202, 56.707) -> (-2.1539998, -293.51202, 56.707)
    Soma {pt3dclear() pt3dadd(-2.1539998, -295.6337, 56.707, 4.243371) pt3dadd(-2.1539998, -291.39035, 56.707, 4.243371)}

//  Looking at segment number 1: Seg0_axon_0, section: Axon, ID: 1, parent: Seg0_soma_0 (0), rad: 0.3970214, (-2.1539998, -293.51202, 56.707) -> (-2.153, -293.47, 56.699997), len: 0.0426141
    Axon {pt3dclear() pt3dadd(-2.1539998, -293.51202, 56.707, 0.7940428) pt3dadd(-2.153, -293.47, 56.699997, 0.7940428)}

//  Looking at segment number 2: Seg2_axon_0, section: Axon, ID: 2, parent: Seg0_axon_0 (1), rad: 0.39658165, (-2.153, -293.47, 56.699997) -> (-2.173, -289.3, 55.612), len: 4.30966
    Axon {pt3dadd(-2.173, -289.3, 55.612, 0.7931633)}

//  Looking at segment number 3: Seg3_axon_0, section: Axon, ID: 3, parent: Seg2_axon_0 (2), rad: 0.39593056, (-2.173, -289.3, 55.612) -> (-1.9339999, -288.975, 55.539), len: 0.409955
    Axon {pt3dadd(-1.9339999, -288.975, 55.539, 0.7918611)}

//  Looking at segment number 4: Seg4_axon_0, section: Axon, ID: 4, parent: Seg3_axon_0 (3), rad: 0.39600632, (-1.9339999, -288.975, 55.539) -> (-0.321, -288.948, 55.251003), len: 1.63873
    Axon {pt3dadd(-0.321, -288.948, 55.251003, 0.79201263)}

//  Looking at segment number 5: Seg5_axon_0, section: Axon, ID: 5, parent: Seg4_axon_0 (4), rad: 0.3958396, (-0.321, -288.948, 55.251003) -> (1.201, -288.969, 54.211998), len: 1.84295
    Axon {pt3dadd(1.201, -288.969, 54.211998, 0.7916792)}

//  Looking at segment number 6: Seg6_axon_0, section: Axon, ID: 6, parent: Seg5_axon_0 (5), rad: 0.39674675, (1.201, -288.969, 54.211998) -> (2.23, -289.029, 52.665), len: 1.85894
    Axon {pt3dadd(2.23, -289.029, 52.665, 0.7934935)}

//  Looking at segment number 7: Seg7_axon_0, section: Axon, ID: 7, parent: Seg6_axon_0 (6), rad: 0.39702016, (2.23, -289.029, 52.665) -> (2.628, -289.172, 50.868), len: 1.84609
    Axon {pt3dadd(2.628, -289.172, 50.868, 0.7940403)}

//  Looking at segment number 8: Seg8_axon_0, section: Axon, ID: 8, parent: Seg7_axon_0 (7), rad: 0.39584845, (2.628, -289.172, 50.868) -> (2.273, -289.31, 49.05), len: 1.85747
    Axon {pt3dadd(2.273, -289.31, 49.05, 0.7916969)}

//  Looking at segment number 9: Seg9_axon_0, section: Axon, ID: 9, parent: Seg8_axon_0 (8), rad: 0.39595705, (2.273, -289.31, 49.05) -> (1.2409999, -289.414, 47.551), len: 1.82287
    Axon {pt3dadd(1.2409999, -289.414, 47.551, 0.7919141)}

//  Looking at segment number 10: Seg10_axon_0, section: Axon, ID: 10, parent: Seg9_axon_0 (9), rad: 0.39604166, (1.2409999, -289.414, 47.551) -> (-0.34, -289.49298, 46.469), len: 1.91742
    Axon {pt3dadd(-0.34, -289.49298, 46.469, 0.7920833)}

//  Looking at segment number 11: Seg11_axon_0, section: Axon, ID: 11, parent: Seg10_axon_0 (10), rad: 0.39683247, (-0.34, -289.49298, 46.469) -> (-2.1090002, -289.494, 46.099003), len: 1.80728
    Axon {pt3dadd(-2.1090002, -289.494, 46.099003, 0.79366493)}

//  Looking at segment number 12: Seg12_axon_0, section: Axon, ID: 12, parent: Seg11_axon_0 (11), rad: 0.39606312, (-2.1090002, -289.494, 46.099003) -> (-3.9850001, -289.477, 46.48), len: 1.91437
    Axon {pt3dadd(-3.9850001, -289.477, 46.48, 0.79212624)}

//  Looking at segment number 13: Seg13_axon_0, section: Axon, ID: 13, parent: Seg12_axon_0 (12), rad: 0.3966724, (-3.9850001, -289.477, 46.48) -> (-5.54, -289.43802, 47.538002), len: 1.8812
    Axon {pt3dadd(-5.54, -289.43802, 47.538002, 0.7933448)}

//  Looking at segment number 14: Seg14_axon_0, section: Axon, ID: 14, parent: Seg13_axon_0 (13), rad: 0.39592046, (-5.54, -289.43802, 47.538002) -> (-6.5360003, -289.325, 49.052002), len: 1.81576
    Axon {pt3dadd(-6.5360003, -289.325, 49.052002, 0.7918409)}

//  Looking at segment number 15: Seg15_axon_0, section: Axon, ID: 15, parent: Seg14_axon_0 (14), rad: 0.3951835, (-6.5360003, -289.325, 49.052002) -> (-6.9080005, -289.187, 50.893997), len: 1.88424
    Axon {pt3dadd(-6.9080005, -289.187, 50.893997, 0.790367)}

//  Looking at segment number 16: Seg16_axon_0, section: Axon, ID: 16, parent: Seg15_axon_0 (15), rad: 0.39628527, (-6.9080005, -289.187, 50.893997) -> (-6.5169997, -289.01, 52.701004), len: 1.85728
    Axon {pt3dadd(-6.5169997, -289.01, 52.701004, 0.79257053)}

//  Looking at segment number 17: Seg17_axon_0, section: Axon, ID: 17, parent: Seg16_axon_0 (16), rad: 0.42722592, (-6.5169997, -289.01, 52.701004) -> (-6.3879995, -289.305, 52.982002), len: 0.427336
    Axon {pt3dadd(-6.3879995, -289.305, 52.982002, 0.85445184)}

//  Looking at segment number 18: Seg18_axon_0, section: Axon, ID: 18, parent: Seg17_axon_0 (17), rad: 0.23947862, (-6.3879995, -289.305, 52.982002) -> (-6.412, -290.835, 53.144), len: 1.53874
    Axon {pt3dadd(-6.412, -290.835, 53.144, 0.47895724)}
}

proc subsets() { local i


//  The group all is assumed never to change
    all = new SectionList()


    soma_group = new SectionList()

    Soma soma_group.append()


    axon_group = new SectionList()

    Axon axon_group.append()


    Soma all.append()
    Axon all.append()
}

proc geom() {
}

proc biophys() {
    forsec all cm = 1.0
    forsec all Ra = 30.0

    forsec all { 
//      Assuming parameters other than max cond dens are set in the mod file...

        insert LeakConductance  { gmax_LeakConductance = 2.5E-5 }  
//      Ion non_specific is used in this mechanism...


    }

}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1

}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}

proc connect2target() {   //$o1 target point process, $o2 returned NetCon


//  Using standard NetBuilder form. (Overly) simple assumption that first soma seg is trigger for AP...
//  Note: neuroConstruct does not use this func for creating connections (in serial mode!), but it can be useful when using generated files in NEURON's NetBuilder

    Soma $o2 = new NetCon(&v(1), $o1)
    print "connect2target called on ", name
}


//  This function is useful when checking what cells (aot sections) have been created. Run allcells() from nCtools.hoc...

proc toString() {
    strdef info
    sprint(info, "Cell ref: %s (%s), at: (%d, %d, %d)", reference, name, x, y, z)
    print info
}


//  This function is useful when checking network connections

proc netInfo() {
    strdef info
    sprint(info, "Cell reference: %s, type: %s", reference, type)
    print "--------  ",info
    print "    There are ", synlist.count(), " connections in ", synlist
    for i=0,synlist.count()-1 {
        print "        Connection from ", synlist.o[i].precell, " to: ", synlist.o[i].postcell
        print "        Pre:   Weight: ", synlist.o[i].weight, ", delay: ", synlist.o[i].delay, ", threshold: ", synlist.o[i].threshold 
        print "        Post:  ", synlist.o[i].syn(), ", gmax: ", synlist.o[i].syn().gmax , ", e: ", synlist.o[i].syn().e , ", rise time: ", synlist.o[i].syn().tau_rise , ", decay time: ", synlist.o[i].syn().tau_decay 
    print " "
    }
    
    
    
    print "--------  "
    print " "
}


endtemplate MI

